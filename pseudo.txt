import { books, authors, genres, BOOKS_PER_PAGE } from './data.js';

// Helper function to create an element with attributes and innerHTML
function createElementWithAttributes(tag, attributes, innerHTML) {
  const element = document.createElement(tag);
  for (const [key, value] of Object.entries(attributes)) {
    element.setAttribute(key, value);
  }
  element.innerHTML = innerHTML;
  return element;
}
// Helper function to create option elements
function createOptionElement(value, text) {
  const attributes = {
    value: value,
  };
  return createElementWithAttributes('option', attributes, text);
}
// Helper function to create preview elements
function createPreviewElement(book) {
  const { author, id, image, title } = book;
  const element = createElementWithAttributes('button', {
    class: 'preview',
    'data-preview': id,
  });
  element.innerHTML = `
    <img class="preview__image" src="${image}" />
    <div class="preview__info">
      <h3 class="preview__title">${title}</h3>
      <div class="preview__author">${authors[author]}</div>
    </div>
  `;
  return element;
}
// Function to initialize the page
function initializePage() {
  let page = 1;
  let matches = books;
  const starting = document.createDocumentFragment();
  for (const book of matches.slice(0, BOOKS_PER_PAGE)) {
    const element = createPreviewElement(book);
    starting.appendChild(element);
  }
  document.querySelector('[data-list-items]').appendChild(starting);
  const genreHtml = document.createDocumentFragment();
  const firstGenreElement = createOptionElement('any', 'All Genres');
  genreHtml.appendChild(firstGenreElement);
  for (const [id, name] of Object.entries(genres)) {
    const element = createOptionElement(id, name);
    genreHtml.appendChild(element);
  }
  document.querySelector('[data-search-genres]').appendChild(genreHtml);
  const authorsHtml = document.createDocumentFragment();
  const firstAuthorElement = createOptionElement('any', 'All Authors');
  authorsHtml.appendChild(firstAuthorElement);
  for (const [id, name] of Object.entries(authors)) {
    const element = createOptionElement(id, name);
    authorsHtml.appendChild(element);
  }
  document.querySelector('[data-search-authors]').appendChild(authorsHtml);
  const prefersDarkTheme = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
  if (prefersDarkTheme) {
    document.querySelector('[data-settings-theme]').value = 'night';









